CREATE TABLE QUERYABLE_COMBINED_DATA_LATEST WITH (KAFKA_TOPIC='pksqlc-mn557QUERYABLE_COMBINED_DATA_LATEST', PARTITIONS=6, REPLICAS=3) AS SELECT *
FROM COMBINED_DATA_LATEST COMBINED_DATA_LATEST
EMIT CHANGES;



CREATE TABLE QUERYABLE_LONG_TERM_FINANCIAL_DATA WITH (KAFKA_TOPIC='pksqlc-mn557QUERYABLE_LONG_TERM_FINANCIAL_DATA', PARTITIONS=6, REPLICAS=3) AS SELECT *
FROM LONG_TERM_FINANCIAL_DATA LONG_TERM_FINANCIAL_DATA
EMIT CHANGES;



CREATE STREAM COMBINED_DATA WITH (KAFKA_TOPIC='combined_data', PARTITIONS=6, REPLICAS=3, VALUE_FORMAT='avro') AS SELECT
  STOCK_QUOTES.SYMBOL SYMBOL,
  STOCK_QUOTES.NAME NAME,
  ((LONG_TERM_FINANCIAL_DATA.EBIT_ANNUAL * 100) / ((LONG_TERM_FINANCIAL_DATA.DEBT + LONG_TERM_FINANCIAL_DATA.EQUITY) - LONG_TERM_FINANCIAL_DATA.CASH)) ROIC,
  (STOCK_QUOTES.MARKET_CAP / LONG_TERM_FINANCIAL_DATA.EQUITY) FAUSTMANN,
  LONG_TERM_FINANCIAL_DATA.ASSETS ASSETS,
  LONG_TERM_FINANCIAL_DATA.CASH CASH,
  LONG_TERM_FINANCIAL_DATA.DEBT DEBT,
  LONG_TERM_FINANCIAL_DATA.EBIT_ANNUAL EBIT_ANNUAL,
  (((LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[0]->EBIT > LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[1]->EBIT) AND (LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[1]->EBIT > LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[2]->EBIT)) AND (LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[2]->EBIT > LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY[3]->EBIT)) EBIT_TRENDING_UP,
  LONG_TERM_FINANCIAL_DATA.EBIT_QUARTERLY EBIT_QUARTERLY,
  LONG_TERM_FINANCIAL_DATA.EQUITY EQUITY,
  LONG_TERM_FINANCIAL_DATA.INSTITUTIONAL_INVESTMENT INSTITUTIONAL_INVESTMENT,
  STOCK_QUOTES.PRICE PRICE,
  STOCK_QUOTES.CHANGE_PERCENTAGE CHANGE_PERCENTAGE,
  STOCK_QUOTES.MARKET_CAP MARKET_CAP,
  STOCK_QUOTES.VOLUME VOLUME,
  STOCK_QUOTES.AVERAGE_VOLUME AVERAGE_VOLUME,
  STOCK_QUOTES.PE PE
FROM STOCK_QUOTES STOCK_QUOTES
INNER JOIN LONG_TERM_FINANCIAL_DATA LONG_TERM_FINANCIAL_DATA ON ((STOCK_QUOTES.SYMBOL = LONG_TERM_FINANCIAL_DATA.SYMBOL))
EMIT CHANGES;





CREATE STREAM LARGEST_MOVERS WITH (KAFKA_TOPIC='largest_movers', KEY_FORMAT='kafka', PARTITIONS=6, REPLICAS=3, VALUE_FORMAT='JSON') AS SELECT
  COMBINED_DATA.SYMBOL KEY,
  COMBINED_DATA.CHANGE_PERCENTAGE CHANGE_PERCENTAGE
FROM COMBINED_DATA COMBINED_DATA
WHERE (((COMBINED_DATA.CHANGE_PERCENTAGE > 5) OR (COMBINED_DATA.CHANGE_PERCENTAGE < -5)) AND (COMBINED_DATA.AVERAGE_VOLUME > 50000))
EMIT CHANGES;





